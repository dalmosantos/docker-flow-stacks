<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.11.1">
  <actions>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.1.2">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/aws-scale</mappedUrl>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.1.7">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>service</string>
        <string>scale</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.36">
    <script>pipeline {
  agent {
    label "prod"
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '2'))
    disableConcurrentBuilds()
  }
  parameters {
    string(
      name: "scale",
      defaultValue: "1",
      description: "The number of worker nodes to add or remove"
    )
  }
  stages {
    stage("scale") {
      steps {
        git "https://github.com/vfarcic/docker-aws-cli.git"
        script {
          def asgName = sh(
            script: "source /run/secrets/aws &amp;&amp; docker-compose run --rm asg-name",
            returnStdout: true
          ).trim()
          if (asgName == "") {
            error "Could not find auto-scaling group"
          }
          def asgDesiredCapacity = sh(
            script: "source /run/secrets/aws &amp;&amp; ASG_NAME=${asgName} docker-compose run --rm asg-desired-capacity",
            returnStdout: true
          ).trim().toInteger()
          def asgNewCapacity = asgDesiredCapacity + scale.toInteger()
          if (asgNewCapacity &lt; 1) {
            error "The number of worker nodes is already at the minimum capacity of 1"
          } else if (asgNewCapacity &gt; 3) {
            error "The number of worker nodes is already at the maximum capacity of 3"
          } else {
            sh "source /run/secrets/aws &amp;&amp; ASG_NAME=${asgName} ASG_DESIRED_CAPACITY=${asgNewCapacity} docker-compose run --rm asg-update-desired-capacity"
            if (scale.toInteger() &gt; 0) {
              sleep 300
              script {
                def servicesOut = sh(
                  script: "docker service ls -q -f label=com.df.reschedule=true",
                  returnStdout: true
                )
                def services = servicesOut.split('\n')
                def date = new Date()
                for(int i = 0; i &lt; services.size(); i++) {
                  def service = services[0]
                  sh "docker service update --env-add 'RESCHEDULE_DATE=${date}' ${service}"
                }
              }
            }
            echo "Changed the number of worker nodes from ${asgDesiredCapacity} to ${asgNewCapacity}"
          }
        }
      }
    }
  }
  post {
    success {
      slackSend(
        color: "good",
        message: """Worker nodes were scaled.
Please check Jenkins logs for the job ${env.JOB_NAME} #${env.BUILD_NUMBER}
${env.BUILD_URL}console"""
      )
    }
    failure {
      slackSend(
        color: "danger",
        message: """Worker nodes could not be scaled.
Please check Jenkins logs for the job ${env.JOB_NAME} #${env.BUILD_NUMBER}
${env.BUILD_URL}console"""
      )
    }
  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <authToken>DevOps22</authToken>
  <disabled>false</disabled>
</flow-definition>
